
/*
 *  Generated by /usr/local/bin/auto-gen-get-set-opaque
 *
 *  Mutator functions for setting with no sanity checking.  Use these to
 *  set structure members from functions outside the job_t
 *  class.  These macros perform no data validation.  Hence, they achieve
 *  maximum performance where data are guaranteed correct by other means.
 *  Use the mutator functions (same name as the macro, but lower case)
 *  for more robust code with a small performance penalty.
 *
 *  These generated macros are not expected to be perfect.  Check and edit
 *  as needed before adding to your code.
 */

/* temp-job-mutators.c */
int job_set_job_id(job_t *job_ptr, unsigned long new_job_id);
int job_set_array_index(job_t *job_ptr, unsigned long new_array_index);
int job_set_job_count(job_t *job_ptr, unsigned new_job_count);
int job_set_procs_per_job(job_t *job_ptr, unsigned new_procs_per_job);
int job_set_min_procs_per_node(job_t *job_ptr, unsigned new_min_procs_per_node);
int job_set_pmem_per_proc(job_t *job_ptr, size_t new_pmem_per_proc);
int job_set_chaperone_pid(job_t *job_ptr, pid_t new_chaperone_pid);
int job_set_job_pid(job_t *job_ptr, pid_t new_job_pid);
int job_set_state(job_t *job_ptr, job_state_t new_state);
int job_set_user_name(job_t *job_ptr, char *new_user_name);
int job_set_user_name_ae(job_t *job_ptr, size_t c, char new_user_name_element);
int job_set_user_name_cpy(job_t *job_ptr, char *new_user_name, size_t array_size);
int job_set_primary_group_name(job_t *job_ptr, char *new_primary_group_name);
int job_set_primary_group_name_ae(job_t *job_ptr, size_t c, char new_primary_group_name_element);
int job_set_primary_group_name_cpy(job_t *job_ptr, char *new_primary_group_name, size_t array_size);
int job_set_submit_node(job_t *job_ptr, char *new_submit_node);
int job_set_submit_node_ae(job_t *job_ptr, size_t c, char new_submit_node_element);
int job_set_submit_node_cpy(job_t *job_ptr, char *new_submit_node, size_t array_size);
int job_set_submit_dir(job_t *job_ptr, char *new_submit_dir);
int job_set_submit_dir_ae(job_t *job_ptr, size_t c, char new_submit_dir_element);
int job_set_submit_dir_cpy(job_t *job_ptr, char *new_submit_dir, size_t array_size);
int job_set_script_name(job_t *job_ptr, char *new_script_name);
int job_set_script_name_ae(job_t *job_ptr, size_t c, char new_script_name_element);
int job_set_script_name_cpy(job_t *job_ptr, char *new_script_name, size_t array_size);
int job_set_compute_node(job_t *job_ptr, char *new_compute_node);
int job_set_compute_node_ae(job_t *job_ptr, size_t c, char new_compute_node_element);
int job_set_compute_node_cpy(job_t *job_ptr, char *new_compute_node, size_t array_size);
int job_set_log_dir(job_t *job_ptr, char *new_log_dir);
int job_set_log_dir_ae(job_t *job_ptr, size_t c, char new_log_dir_element);
int job_set_log_dir_cpy(job_t *job_ptr, char *new_log_dir, size_t array_size);
int job_set_pull_command(job_t *job_ptr, char *new_pull_command);
int job_set_pull_command_ae(job_t *job_ptr, size_t c, char new_pull_command_element);
int job_set_pull_command_cpy(job_t *job_ptr, char *new_pull_command, size_t array_size);
int job_set_push_command(job_t *job_ptr, char *new_push_command);
int job_set_push_command_ae(job_t *job_ptr, size_t c, char new_push_command_element);
int job_set_push_command_cpy(job_t *job_ptr, char *new_push_command, size_t array_size);
