#!/bin/sh -e

##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2025-01-05  System AdministratorBegin
##########################################################################

install_munge_key()
{
    valid=no
    while [ $valid != yes ]; do
	cat << EOM

The munge authentication service requires a key in $munge_key,
which must be identical on computers in this cluster/grid.  The file
is not present on this computer.  Please choose from the following options
to install the key file:

1.. Generate new munge key for this cluster/grid
2.. Automatically and securely scp munge key from another system
3.. Pause this script and manually install munge key from elsewhere

EOM
	printf "Selection? "
	read selection
	
	case 0"$selection" in
	01)
	    if mungekey; then
		valid=yes
	    fi
	    ;;
	
	02)
	    valid=yes
	    printf "Hostname of computer with munge key? "
	    read host_name
	    cat << EOM

Enter the username of a user that exists on $host_name
and has permission to "su" to root.  On BSD and some Linux systems,
this user must be a member of the root or wheel group.

This user cannot be "root".  Secure systems do not accept remote logins
as the root user.

EOM
	    printf "Username? "
	    read user_name
	    printf "TCP port to ssh from $(hostname) to $host_name? [22] "
	    read tcp_port
	    if [ 0"$tcp_port" = 0 ]; then
		tcp_port=22
	    fi

	    cat << EOM

This process will be simpler if SSH keys are installed for
root@$(hostname) to $user_name@$host_name.  If this has not
already been done, run the following command as root in
another terminal:

    auto-ssh-authorize $user_name@$host_name

EOM
	    pause
	    set +e
	    printf "Enter password for $user_name@$host_name:\n"
	    remote_localbase=$(ssh -p $tcp_port $user_name@$host_name auto-localbase)
	    printf "Enter password for $user_name@$host_name, then root@$host_name:\n"
	    ssh -t -p $tcp_port $user_name@$host_name asroot \
		cp -fp $remote_localbase/etc/munge/munge.key \
		      /tmp/$user_name.key
	    printf "Enter password for $user_name@$host_name, then root@$host_name:\n"
	    ssh -t -p $tcp_port $user_name@$host_name \
		   asroot chown $user_name /tmp/$user_name.key
	    # sh does not support ~ on all platforms
	    printf "Enter $user_name password for $host_name\n"
	    scp -P $tcp_port $user_name@${host_name}:/tmp/$user_name.key $munge_key
	    printf "Enter password for $user_name@$host_name:\n"
	    ssh -p $tcp_port $user_name@$host_name rm -f /tmp/$user_name.key
	    set -e
	    ;;
	
	03)
	    printf "Securely copy your key file to $munge_key.\n"
	    printf "Ensure that it it not readable to ordinary users at any time.\n"
	    pause
	    valid=yes
	    ;;
	
	*)
	    printf "Invalid selection.\n" >> /dev/stderr
	    ;;
	
	esac
	pause
    done
}


##########################################################################
#   Title:
#       lpjs-munge-enable
#
#   Section:
#       8
#
#   Synopsis:
#       lpjs munge-enable
#       
#   Description:
#       lpjs munge-enable is a convenience script for enabling the
#       munge authentication service.  This process is dependent on
#       the operating system and the package manager used to install
#       munge.  lpjs munge-enable eliminates the need to deal with
#       these differences or to type in lengthy pathnames.
#
#       lpjs munge-enable is not generally run directly by the user,
#       but is used by lpjs-compd-enable(8) and lpjs-dispatchd-enable(8).
#       
#   Arguments:
#       None
#       
#   Returns:
#       0 upon success, non-zero error codes otherwise
#
#   See also:
#       lpjs-admin(8), lpjs-compd-enable(8), lpjs-dispatchd-enable(8)
#       
#   History:
#   Date        Name        Modification
#   2023-05-28  J Bacon     Begin
##########################################################################

# Prevent user from running a Trojan as root in the case their account
# was compromised
absolute="$(which $0)"
# Don't count on -e being set at this point
if ! auto-file-secure "$absolute"; then
    exit 1
fi

if ! auto-root-check $0; then
    printf "Root "
    # exec quotes '$absolute --flag', causing usage error
    # Assigning to cmd works around the problem
    cmd="$absolute $@"
    exec su -m root -c "$cmd"
fi

munge_etc=/usr/local/etc/munge
munge_key=$munge_etc/munge.key
if [ $(uname) = Linux ]; then
    munge_user=$(stat -c '%U' $munge_etc)
    munge_group=$(stat -c '%G' $munge_etc)
else
    munge_user=$(stat -f '%Su' $munge_etc)
    munge_group=$(stat -f '%Sg' $munge_etc)
fi

if [ -e $munge_key ]; then
    printf "$munge_key already exists.  Update replace it? y/[n] "
    read replace_munge
    if [ 0"$replace_munge" = 0y ]; then
	install_munge_key
    fi
    pause
else
    install_munge_key
fi

if chown ${munge_user}:$munge_group $munge_key && chmod 600 $munge_key; then
    valid=yes
fi

printf "Permissions should be -rw-------\n"
printf "and ownership munge:munge or the name:group of the pkgsrc user.\n"
printf "If they are not, you may have a security breach.\n"
printf "Current ownership and permissions:\n"
ls -al /usr/local/etc/munge 
pause

# FIXME: Make sure pkgsrc service is called "munged"?
if [ -e /usr/local/etc/rc.d/munged ]; then
    # Dragonfly, FreeBSD
    auto-enable-service munged $0
elif [ $(uname) = Darwin ]; then
    # On macOS, we must install the plist file ourselves
    plist=/usr/local/share/munge/Launchd/org.pkgsrc.munge.plist
    if [ -e $plist ]; then
	auto-enable-service -s $plist org.pkgsrc.munge lpjs-admin
    fi
elif [ $(uname) = Linux ]; then
    # On Linux, systemctl creates a link to the service file
    script=/usr/local/lib/systemd/system/munge.service
    if [ -e $script ]; then
	auto-enable-service -s $script munge lpjs-admin
    fi
elif [ $(uname) = NetBSD ]; then
    # On NetBSD, pkgsrc installs/deinstalls the RC files, but they are
    # named munge rather than munged
    auto-enable-service munge $0
elif [ $(uname) = SunOS ]; then
    # FIXME: The SunOS init scripts are not working yet
    # FIXME: Can we enable an init script directly under /usr/local?
    # FIXME: Add SunOS support to auto-enable-service
    cp /usr/local/etc/init.d/munge /etc/init.d
    /etc/init.d/munge restart
else
    printf "Could not find munge RC script.  Enable munge manually\n"
    printf "before continuing.  Press return after munged is running.\n"
    read junk
fi
