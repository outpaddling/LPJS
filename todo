
Now
---
Add hostname resolution check to all admin scripts

Blacklist scripts that are canceled due to RSS violations
until mem-per-proc is corrected

Blacklist scripts that allocate much more than the peak RSS use
until mem-per-proc is corrected

Check munge uid of all messages to prevent spoof attacks
    Must match the uid used during compd checkin

When Mac goes down due to full disk access, resource remain allocated
    Same for timeouts?

dispatchd-disable
    rm -f /Library/LaunchDaemons/org.pkgsrc.lpjs_dispatchd.plist
    rm -i prefix/var/log/lpjs/dispatchd

dispatchd hangs while compute node is shutting down
    Make sure all socket reads have a timeout

lpjs cancel doesn't work on jobs that failed and got requeued

Save user-specified node states to disk and reload at startup
Add maintenance state that won't be changed to up at compd checkin

Reset job state and node resources for jobs that fail to start due to os err

Add #lpjs input-files and #lpjs output-files as an alternative to
manually code file transfers


Later
-----
Job dependencies

Support real numbers for pmem, useful when using GB or GiB

MPI support

Resource limits via rctl, cgroups, etc?

Submission parameter:
    vmem per proc

Add #lpjs concurrent-job-limit

Optional submission parameters
    has_command, where command is any program in the standard PATH on node
	PATH may differ across compute nodes, as they may run different OSs
    Limit jobs to specific set of nodes, e.g. on high-speed network
	has_feature, specified in config file
	By hostname

Terminate jobs that exceed their resource allocation
    * Only if there are jobs waiting in the queue
	Otherwise, accumulated run time is wasted
    Virtual memory limit checks
	Document that this is enforced by ulimit() and unbreakable
    Real memory limit checks
	Document that this is enforced by periodic sampling

Convert sbatch scripts to lpjs and vice versa
    #lpjs <-> #SBATCH
    LPJS_ARRAY_INDEX <-> SLURM_ARRAY_TASK_ID

Add optional disk usage requirements to job specs, e.g.
    #lpjs du /tmp 20GiB
