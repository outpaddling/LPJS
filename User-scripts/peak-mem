#!/bin/sh -e

##########################################################################
#   Synopsis:
#       lpjs peak-mem script.lpjs
#       
#   Description:
#       .B lpjs peak-mem
#       parses the chaperone logs for the given script, extracting
#       the periodic peak memory reports, and reports the highest real
#       memory use in total, and per processor.  It then recommends a
#       pmem-per-processor requirement for subsequent runs of the script.
#
#       Scripts that LPJS terminates for using more memory than they
#       allocated, and scripts that allocate far more memory than they
#       actually use (which may prevent other jobs from running, and is
#       thus is inconsiderate to other cluster/grid users),
#       are disabled by LPJS until pmem-per-processor is corrected to a
#       reasonable value.
#       
#   Arguments:
#       script.lpjs     An LPJS job script that has been previously completed
#       
#   Examples:
#       shell-prompt: lpjs peak-mem 04-trim.lpjs 
#       
#       Peak mem = 113108 KiB = 110 MiB
#       Processors / job = 2
#       Peak mem / processor = 55
#       
#       Use the following for peak memory + 20%:
#       
#       #lpjs pmem-per-processor 66MiB
#
#   See also:
#       lpjs create-script(1)
#       
#   History:
#   Date        Name        Modification
#   2025-01-07  Jason Bacon Begin
##########################################################################

usage()
{
    printf "Usage: $0 script.lpjs\n" >> /dev/stderr
    printf "Example: $0 17-hisat2-align.lpjs\n" >> /dev/stderr
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Main
##########################################################################

if [ $# != 1 ]; then
    usage
fi
if ! echo $1 | grep -q '.lpjs$'; then
    usage
fi

script=$1
ppj=$(awk '$1 == "#lpjs" && $2 == "processors-per-job" { print $3 }' $script)
log_dir=$(awk '$1 == "#lpjs" && $2 == "log-dir" { print $3 }' $script)
if [ -z "$log_dir" ]; then
    log_dir=LPJS-logs/${script%.lpjs}
fi
if [ ! -e $log_dir ]; then
    printf "$log_dir does not exist.  Has $script been run?\n" >> /dev/stderr
    exit 1
fi
kib=$(tail $log_dir/Job-*/chap* | fgrep 'Peak total' | sort -nk 9 | tail -n 1 \
    | awk '{ print $(NF - 1) }')
if [ -z "$kib" ]; then
    printf "No peak memory data found in log.  Did the job fail?\n" >> /dev/stderr
    exit 1
fi
mib=$(($kib / 1024))
printf "\nPeak mem = %s KiB = %s MiB\n" $kib $mib
printf "Processors / job = %s\n" $ppj
printf "Peak mem / processor = %s\n" $(($mib / $ppj))
printf "\nUse the following for peak memory + 20%%:\n\n"
printf "#lpjs pmem-per-processor %s\n\n" $((mib / $ppj * 6 / 5))MiB

printf "Edit $script? [y]/n "
read edit
if [ 0"$edit" != 0n ]; then
    printf "Copy the #lpjs pmem-per-processor line to your clipboard.\n"
    pause
    : ${EDITOR:=vi}
    $EDITOR $script
fi
