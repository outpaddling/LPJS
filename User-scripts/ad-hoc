#!/bin/sh

##########################################################################
#   Title:
#       lpjs-adhoc
#
#   Synopsis:
#       lpjs ad-hoc
#
#   Description:
#       This script provides a terminal-base menu system for starting
#       up an ad-hoc cluster or grid, i.e. one where the dispatch and
#       compute daemons are started and stopped manually, rather than
#       using system services.
#       
#   Arguments:
#       None
#       
#   Returns:
#       0 on success, non-zero error codes otherwise
#
#   See also:
#       lpjs-admin(1), lpjs-menu(1)
#       
#   History:
#   Date        Name        Modification
#   2021-10-06  J Bacon     Begin
##########################################################################

##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2024-03-22  Jason Bacon Begin
##########################################################################

start_daemon()
{
    if [ $# != 1 ] && [ $# != 2 ]; then
	printf "Usage: start_daemon command\n"
	return 1
    fi
    daemon=$1
    
    if [ $2 = background ]; then
	resp=2
    elif [ $2 = foreground ]; then
	resp=1
    else
	resp=''
	while [ 0"$resp" != 01 ] && [ 0"$resp" != 02 ]; do
	    cat << EOM
    
1.. Foreground (log messages on-screen and do not return to menu)
2.. Background (log messages to file and return to menu)

EOM
	    printf "Selection? "
	    read resp
	done
    fi
    
    if [ $resp = 1 ]; then
	printf "Type Ctrl+c in this window to terminate $daemon.\n"
	pause
	if [ $daemon = munged ]; then
	    $daemon --foreground
	else
	    $daemon
	fi
    else
	printf "Logged messages can be viewed using \"lpjs log\"\n"
	printf "or the \"View log(s)\" menu option.\n"
	if [ $daemon = munged ]; then
	    $daemon
	else
	    $daemon --daemonize
	fi
	echo $?
	pgrep -lf $daemon
    fi
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2024-05-29  ,,,         Begin
##########################################################################

stop_daemon()
{
    if [ $# != 1 ]; then
	printf "Usage: stop_daemon command\n"
	exit 1
    fi
    daemon=$1
    
    printf "Before pkill:\n"
    pgrep -lf $daemon
    pkill -f $daemon
    sleep 1
    printf "After pkill:\n"
    pgrep -lf $daemon
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2024-05-29  ,,,         Begin
##########################################################################

munge_start()
{
    cat << EOM

Note: Munge can only be started under the username by which it was installed.
If you are not that user, you will need to ask for assistance.

EOM
    printf "Continue? [y]/n "
    read continue
    if [ 0"$continue" != 0n ]; then
	key_file=$(auto-localbase)/etc/munge/munge.key
	while [ ! -e $key_file ]; do
	    cat << EOM

Missing key file $key_file.

1.. Create
2.. Copy from another host

EOM
	    printf "Selection? "
	    read selection
	    case 0"$selection" in
	    01)
		mungekey
		;;
	    02)
		printf "Copy munge.key to $(auto-localbase)/etc/munge.\n"
		pause
		;;
	    *)
		printf "Invalid selection.\n" >> /dev/stderr
		;;
	    esac
	done
	# Required for munge to start
	chmod a+x $HOME
	start_daemon munged $@
    fi
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2024-05-29  ,,,         Begin
##########################################################################

munge_stop()
{
    printf "Before stop:\n"
    pgrep -lf munged
    munged --stop
    printf "After stop:\n"
    sleep 1
    pgrep -lf munged
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2025-02-25  Jason Bacon Begin
##########################################################################

stop_all()
{
    stop_daemon lpjs_compd
    stop_daemon lpjs_dispatchd
    munge_stop
    return 0
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2025-02-25  Jason Bacon Begin
##########################################################################

restart_all()
{
    stop_daemon lpjs_compd
    stop_daemon lpjs_dispatchd
    munge_stop
    munge_start background
    start_daemon lpjs_dispatchd background
    start_daemon lpjs_compd background
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

: ${EDITOR:=vi}
CONF_FILE=/Users/bacon/Dreckly/pkg/etc/lpjs/config

while true
do
    clear
    /Users/bacon/Pkgsrc/pkg/libexec/lpjs/banner
    cat << EOM

1.. Set up a zero-configuration one-node cluster and start all daemons
2.. Generate a new config file
3.. Edit the config file
4.. Start lpjs_dispatchd (make this the head node)
5.. Stop lpjs_dispatchd
6.. Start lpjs_compd (make this a compute node)
7.. Stop lpjs_compd
8.. Start munged (required by both dispatchd and compd)
9.. Stop munged
10. Stop all daemons
11. Restart all daemons
12. View log(s)
Q.. Quit

EOM

    read -p 'Selection? ' resp
    case $resp in
    1)
	# Reserve 1 GiB or half of physical memory, whichever is less,
	# for OS and other apps.  Convert to MiB.
	pmem=$(auto-physmem)
	pmem=$(($pmem / 1024 / 1024))
	if [ $pmem -lt 2048 ]; then
	    pmem=$(($pmem / 2))
	else
	    pmem=$((pmem - 1024))
	fi
	# Use localhost for head node in case hostname is not routable
	# and there's nothing the user can do about it.  This may be
	# the case for institutionally managed computers.
	# lpjs_compd reports it's hostname on checkin, so that must
	# be used for the compute node for authorization.
	cat << EOM > $CONF_FILE
head    localhost
compute $(hostname) pmem=${pmem}MiB
# Example to limit processors used by LPJS jobs
# compute $(hostname) pmem=${pmem}MiB processors=4
EOM
	# $EDITOR $CONF_FILE
	stop_daemon lpjs_dispatchd
	stop_daemon lpjs_compd
	munge_stop
	munge_start background
	start_daemon lpjs_dispatchd background
	start_daemon lpjs_compd background
	pause
	;;
    
    2)
	if [ -e $CONF_FILE ]; then
	    printf "Overwrite existing $CONF_FILE? y/[n] "
	    read overwrite
	    if [ 0"$overwrite" = 0y ]; then
		printf "head $(hostname)\n" > $CONF_FILE
		printf "# compute $(hostname)\n" >> $CONF_FILE
		$EDITOR $CONF_FILE
	    fi
	fi
	;;
    
    3)
	$EDITOR $CONF_FILE
	printf "Restart daemons? [y]/n "
	read restart
	if [ 0"$restart" != 0n ]; then
	    restart_all
	    pause
	fi
	;;
    
    4)
	# FIXME: Check routability with lpjs/resolve-host
	printf "head $(hostname)\n" > $CONF_FILE
	cat << EOM

Enter the names of authorized compute nodes, one per line.

Generally, the head node should not also be a compute node,
as heavy workloads could impact lpjs_dispatchd.  The exception
to this rule is a one-node cluster, option 1 in this menu.

Just press Enter after last compute node has been entered.

EOM
	compute_node='x'
	start_compd=no
	while [ -n "$compute_node" ]; do
	    printf "Complete hostname of compute node? "
	    read compute_node
	    if [ -n "$compute_node" ]; then
		printf "compute $compute_node\n" >> $CONF_FILE
		if [ $compute_node = $(hostname) ]; then
		    start_compd=yes
		fi
	    fi
	done
	stop_all
	munge_stop
	munge_start background
	stop_daemon lpjs_dispatchd
	start_daemon lpjs_dispatchd background
	if [ $start_compd = yes ]; then
	    stop_daemon lpjs_compd
	    start_daemon lpjs_compd background
	fi
	pause
	;;
    
    5)
	stop_daemon lpjs_dispatchd
	pause
	;;
    
    6)
	printf "Hostname of headnode? "
	read head_node
	if [ -n "$head_node" ]; then
	    printf "head $head_node\n" > $CONF_FILE
	    printf "compute $(hostname)\n" >> $CONF_FILE
	    cat << EOM

Make sure $head_node has $(hostname) listed as a compute node
in etc/lpjs/config.

Add it and restart lpjs_dispatchd on the head node if needed.

EOM
	    pause
	    munge_stop
	    munge_start background
	    stop_daemon lpjs_compd
	    start_daemon lpjs_compd background
	    pause
	fi
	;;

    7)
	stop_daemon lpjs_compd
	pause
	;;
    
    8)
	munge_start background
	pause
	;;
    
    9)
	munge_stop
	pause
	;;
    
    10)
	stop_all
	pause
	;;
    
    11)
	restart_all
	pause
	;;
	
    12)
	lpjs log
	pause
	;;

    Q|q)
	exit 0
	;;

    *)
	printf "Invalid option: $resp\n"
    esac
done
