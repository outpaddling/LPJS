#!/bin/sh -e

##########################################################################
#   Title:
#       lpjs-create-script
#
#   Synopsis:
#       lpjs create-script script[.lpjs]
#   
#   Description:
#       lpjs create-script interactively generates an LPJS job script,
#       guiding the user with prompts for basic parameters.  Scripts
#       should have a .lpjs filename extension.  If one is not included
#       in the command line, it will be added.
#
#   Arguments:
#       Name of the script, with or without .lpjs extension
#       
#   Returns:
#       0 upon success, otherwise non-zero error codes
#
#   Examples:
#       lpjs create-script fastq-trim
#       lpjs create-script fastq-trim.lpjs
#
#   See also:
#       lpjs-menu(1), lpjs-ad-hoc(1)
#       
#   History:
#   Date        Name        Modification
#   2021-10-06  Jason Bacon Begin
##########################################################################

usage()
{
    printf "Usage: $0 [--shell sh|bash|csh|...] script-name.lpjs\n" >> /dev/stderr
    exit 1
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2024-02-07  Jason Bacon Begin
##########################################################################

get_threads_per_process()

{
    valid_selection=no
    while [ $valid_selection = no ]; do
	cat << EOM

For shared-memory parallel programs (pthreads, OpenMP, etc.),
processors-per-node must be the same as processors-per-job, since all
of the threads or processes must run on the same node.

For distributed parallel programs (e.g. MPI), processes do not
need to be on the same node, so processors-per-node may be less than
processors-per-job.

1.. Shared memory parallel program (OpenMP, pthreads, etc.)
2.. Distributed parallel program   (MPI, etc.)

EOM
	read parallel_type
	case 0"$parallel_type" in
	01)
	    threads_per_process=$processors_per_job
	    valid_selection=yes
	    ;;
	
	02)
	    threads_per_process=1
	    valid_selection=yes
	    ;;
	
	*)
	    printf "Invalid selection.\n" >> /dev/stderr
	    ;;
	esac
    done
}


##########################################################################
#   Main
##########################################################################

if [ $# -lt 1 ]; then
    usage
fi
if [ $1 = "--shell" ]; then
    shell=$2
    shift
    shift
else
    shell="sh"
fi
if [ $# != 1 ]; then
    usage
fi
script=$1
if [ ${script##*.} != "lpjs" ]; then
    script=${script}.lpjs
fi

if [ 0"$shell" = 0"$script" ]; then # No extension
    shell="sh"
fi
case $shell in
sh)
    shebang="#!/bin/sh -e"
    ;;

bash)
    shebang="#!/usr/bin/env bash\n\nset -e"
    ;;

dash)
    shebang="#!/usr/bin/env dash\n\nset -e"
    ;;

*)
    shebang="#!/usr/bin/env $shell"
    ;;

esac

if [ ${script##*.} != lpjs ]; then
    script=$script.lpjs
fi

submission_type=0
while [ 0"$submission_type" != 01 ] && [ 0"$submission_type" != 02 ] && \
      [ 0"$submission_type" != 03 ] && [ 0"$submission_type" != 04 ]; do
    cat << EOM

1.. Batch serial job
2.. Array of serial jobs (embarrassingly parallel)
3.. Multiproc (parallel program using OpenMP, pthreads, MPI, etc)
4.. Array of multiproc jobs

EOM
    printf 'Submission type? '
    read submission_type
done

case 0"$submission_type" in
01)
    jobs=1
    processors_per_job=1
    threads_per_process=1
    ;;

02)
    printf 'Number of jobs? '
    read jobs
    processors_per_job=1
    threads_per_process=1
    ;;

03)
    jobs=1
    printf 'Processors per job? '
    read processors_per_job
    get_threads_per_process
    ;;

04)
    printf 'Number of jobs? '
    read jobs
    printf 'Processors per job? '
    read processors_per_job
    get_threads_per_process
    ;;

*)
    printf "Invalid selection.\n" >> /dev/stderr
    ;;
    
esac

valid_mem=no
while [ $valid_mem != yes ]; do
    cat << EOM

Memory requirements must be followed by one of the following:

MB = megabytes  = 10^6 bytes = $(echo '10^6' | bc) bytes
MiB = mibibytes = 2^20 bytes = $(echo '2^20' | bc) bytes
GB = gigabytes  = 10^9 bytes = $(echo '10^9' | bc) bytes
GiB = gibibytes = 2^30 bytes = $(echo '2^30' | bc) bytes

Examples: 100MB, 100MiB, 2GB, 4GiB

EOM
    printf 'Memory per proc? '
    read mem_per_proc
    if echo $mem_per_proc | grep -Eq '^[0-9]+[MG]i?B'; then
	valid_mem=yes
    else
	printf "Invalid memory specification.\n"
    fi
done

printf 'Command to run on compute node[s]? '
read command

printf "$shebang\n" > $script
cat << EOM >> $script

#########################################################################
# Caution:
#
# Make sure your command syntax is correct for the $shell shell.
# It is a common mistake, for example, to use bash extensions with
# #!/bin/sh, which is not portable.  Bash is an extension of sh.
# If you use bash features not present in sh, your shebang line
# (first line of the script) should be
#
# #!/usr/bin/env bash

#lpjs jobs $jobs
#lpjs processors-per-job $processors_per_job
#lpjs min-processors-per-node $threads_per_process
#lpjs pmem-per-processor $mem_per_proc

$command
EOM

: ${EDITOR:=vi}
$EDITOR $script
chmod u+x $script
