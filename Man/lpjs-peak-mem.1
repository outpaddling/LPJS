\" Generated by script2man from peak-mem
.TH peak-mem 1

\" Convention:
\" Underline anything that is typed verbatim - commands, etc.
.SH SYNOPSIS
.PP
.nf 
.na
lpjs peak-mem log-dir
.ad
.fi

.SH ARGUMENTS
.nf
.na
log-dir     The main log directory for the job submission
.ad
.fi

.SH DESCRIPTION

.B lpjs peak-mem
parses the chaperone logs under the given log directory, extracting
the periodic peak memory reports, and outputs the highest.
This can be used to optimize the memory requirements of subsequent
runs, specified in the jobs script as

#lpjs pmem-per-processor

Note that for shared-memory multicore jobs (pthreads, OpenMP, etc),
the pmem-per-processor specification should use the
value reported, divided by the number of processors used
to determine the best value for pmem-per-processor.  The value of
pmem-per-processor should be set slightly higher than this dividend.
How much higher depends on how variable the memory use is.
For well-behaved programs, 10% should suffice.

Scripts that LPJS terminates for using more memory than they
allocated, and scripts that allocate far more memory than they
actually use (which may prevent other jobs from running, and is
thus is inconsiderate to other cluster/grid users),
are disabled by LPJS until pmem-per-processor is corrected to a
reasonable value.

.SH EXAMPLES
.nf
.na
# lpjs peak-mem Logs/17-hisat2-align/
01-07 08:47:42 main(): Peak total job RSS = 5242804 KiB

# grep processors-per-job 17-hisat2-align.lpjs
lpjs processors-per-job 4
lpjs min-processors-per-node processors-per-job

Using the Unix "bc" command to divide the above peak memory
by 4 processors, then divide by 1024 to convert from KiB to MiB,
and finally add 10%:

# bc
(5242804 / 4 / 1024) * 1.1
1407.97958984375000000000

#lpjs pmem-per-processor 1408MiB
.ad
.fi

.SH SEE ALSO

lpjs create-script(1), lpjs-run-time(1)

